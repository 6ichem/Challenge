[{"/Users/hichem/Desktop/Archive/client/src/index.js":"1","/Users/hichem/Desktop/Archive/client/src/reportWebVitals.js":"2","/Users/hichem/Desktop/Archive/client/src/components/App/App.jsx":"3","/Users/hichem/Desktop/Archive/client/src/components/Header/Header.jsx":"4","/Users/hichem/Desktop/Archive/client/src/components/Section/Section.jsx":"5","/Users/hichem/Desktop/Archive/client/src/components/Section/Section.logic.js":"6","/Users/hichem/Desktop/Archive/client/src/components/GridList/GridList.jsx":"7","/Users/hichem/Desktop/Archive/client/src/components/Loading/Loading.jsx":"8","/Users/hichem/Desktop/Archive/client/src/components/Loading/Loading.logic.js":"9","/Users/hichem/Desktop/Archive/client/src/components/GridList/GridList.logic.js":"10","/Users/hichem/Desktop/Archive/client/src/components/GridItem/GridItem.jsx":"11","/Users/hichem/Desktop/Archive/client/src/components/Ad/Ad.jsx":"12","/Users/hichem/Desktop/Archive/client/src/components/GridItem/GridItem.logic.js":"13","/Users/hichem/Desktop/Archive/client/src/utils/relativeTime.js":"14","/Users/hichem/Desktop/Archive/client/src/utils/centToDollars.js":"15"},{"size":519,"mtime":1607547564000,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499198500000,"results":"18","hashOfConfig":"17"},{"size":219,"mtime":1607548426000,"results":"19","hashOfConfig":"17"},{"size":367,"mtime":1607587324626,"results":"20","hashOfConfig":"17"},{"size":1460,"mtime":1607588657047,"results":"21","hashOfConfig":"17"},{"size":3734,"mtime":1607588549797,"results":"22","hashOfConfig":"17"},{"size":1230,"mtime":1607590397522,"results":"23","hashOfConfig":"17"},{"size":301,"mtime":1607592618000,"results":"24","hashOfConfig":"17"},{"size":551,"mtime":1607592594000,"results":"25","hashOfConfig":"17"},{"size":1047,"mtime":1607588816661,"results":"26","hashOfConfig":"17"},{"size":582,"mtime":1607590048000,"results":"27","hashOfConfig":"17"},{"size":203,"mtime":1607568824000,"results":"28","hashOfConfig":"17"},{"size":463,"mtime":1607589379888,"results":"29","hashOfConfig":"17"},{"size":1056,"mtime":1607589800531,"results":"30","hashOfConfig":"17"},{"size":228,"mtime":1607589710579,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jhv4su",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/Users/hichem/Desktop/Archive/client/src/index.js",[],"/Users/hichem/Desktop/Archive/client/src/reportWebVitals.js",[],"/Users/hichem/Desktop/Archive/client/src/components/App/App.jsx",[],"/Users/hichem/Desktop/Archive/client/src/components/Header/Header.jsx",[],["65","66"],"/Users/hichem/Desktop/Archive/client/src/components/Section/Section.jsx",[],"/Users/hichem/Desktop/Archive/client/src/components/Section/Section.logic.js",["67","68"],"import React from \"react\";\r\nimport Axios from \"axios\";\r\n\r\nexport const useSection = () => {\r\n  const [displayData, setDisplayData] = React.useState([]);\r\n  const [batchedData, setBatchedData] = React.useState([]);\r\n  const [sortType, setSortType] = React.useState(\"id\");\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [page, setPage] = React.useState(1);\r\n  const [endOfData, setEndOfData] = React.useState(false);\r\n  const [ads, setAds] = React.useState([]);\r\n\r\n  // This function will be called whenever sortType changed\r\n  const fetchingData = async () => {\r\n    console.log(\"fetching data\");\r\n    try {\r\n      // When loading data, loading should popup\r\n      setLoading(true);\r\n      //  request url\r\n      const requestUrl = `http://localhost:3000/api/products?_page=1&_limit=${\r\n        20 * page\r\n      }&_sort=${sortType}`;\r\n\r\n      // I used async await to get the clear loading state\r\n      const response = await Axios.get(requestUrl);\r\n\r\n      // Just a destructuring\r\n      const fetchedData = response.data;\r\n\r\n      setDisplayData(fetchedData);\r\n      // Since the requirement need batched data, I need to request batch data to improve the User experience\r\n      await fetchingBatchData();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      // If the server is error\r\n      throw new Error(\"cannot fetch the data\");\r\n    }\r\n  };\r\n\r\n  // This function is much similar to fetchingData\r\n  const fetchingBatchData = async () => {\r\n    console.log(\"fetching batch data\");\r\n    try {\r\n      // it's prevent the failure/ wrong data added to displayData\r\n      setBatchedData([]);\r\n      setLoading(true);\r\n      // request Url\r\n      const requestUrl = `http://localhost:3000/api/products?_page=${\r\n        page + 1\r\n      }&_limit=20&_sort=${sortType}`;\r\n\r\n      const response = await Axios.get(requestUrl);\r\n\r\n      const fetchedData = response.data;\r\n      // This will happen when there's no data to fetch anymore\r\n      if (fetchedData.length === 0) {\r\n        setLoading(false);\r\n        return setEndOfData(true);\r\n      }\r\n\r\n      setBatchedData(fetchedData);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      throw new Error(\"cannot fetch the data\");\r\n    }\r\n  };\r\n  // This function will be called whenever user scroll to the bottom of the list grid\r\n  const loadMore = () => {\r\n    // This will prevent user abuse scrolling and prevent fetching data when end of data\r\n    if (loading || endOfData) {\r\n      return;\r\n    }\r\n    // increase page for batched data\r\n    setPage(page + 1);\r\n    // set the new Display Data\r\n    setDisplayData([...displayData, ...batchedData]);\r\n  };\r\n  // This function will reroll data, if you need a trick to pass 2 ad in a row, use Math.random() * 8 and it will never have duplicate ad.\r\n  const reRoll = () => Math.floor(Math.random() * 1000);\r\n\r\n  // This function will get new ad and prevent 2 ad in a row\r\n  const getNewAd = () => {\r\n    let newAd = reRoll();\r\n    if (ads.length === 0) {\r\n      return setAds([...ads, newAd]);\r\n    }\r\n\r\n    const prevAd = ads[ads.length - 1];\r\n\r\n    // This will make sure no ad display twice in a row\r\n    if (newAd % 10 === prevAd % 10) {\r\n      console.log(\"?\");\r\n      newAd += 3;\r\n    }\r\n    // set new Ads using es6\r\n    setAds([...ads, newAd]);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    // This will fetch data whenever sortType state changed\r\n    fetchingData();\r\n  }, [sortType]);\r\n\r\n  React.useEffect(() => {\r\n    // This will prevent fetching batch data 2 times\r\n    if (page === 1) return;\r\n    fetchingBatchData();\r\n    // Since I render 20 item per request, I can call new ad in here\r\n    getNewAd();\r\n  }, [page]);\r\n\r\n  return {\r\n    models: { sortType, ads, displayData, endOfData, loading },\r\n    operators: { loadMore, setSortType },\r\n  };\r\n};\r\n","/Users/hichem/Desktop/Archive/client/src/components/GridList/GridList.jsx",[],"/Users/hichem/Desktop/Archive/client/src/components/Loading/Loading.jsx",[],"/Users/hichem/Desktop/Archive/client/src/components/Loading/Loading.logic.js",["69"],"import React from \"react\";\r\nimport Typed from \"typed.js\";\r\n\r\nexport const useLoading = () => {\r\n  const loadingRef = React.useRef(null);\r\n  const options = {\r\n    strings: [\"Loading\", \"Loading...\"],\r\n    typeSpeed: 40,\r\n    loop: true,\r\n    backSpeed: 40,\r\n    startDelay: 0,\r\n    showCursor: false,\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (!loadingRef.current) return;\r\n\r\n    const typed = new Typed(`#${loadingRef.current.id}`, options);\r\n\r\n    return () => typed.destroy();\r\n  }, []);\r\n\r\n  return { models: { loadingRef }, operators: {} };\r\n};\r\n","/Users/hichem/Desktop/Archive/client/src/components/GridList/GridList.logic.js",[],"/Users/hichem/Desktop/Archive/client/src/components/GridItem/GridItem.jsx",[],"/Users/hichem/Desktop/Archive/client/src/components/Ad/Ad.jsx",[],"/Users/hichem/Desktop/Archive/client/src/components/GridItem/GridItem.logic.js",[],"/Users/hichem/Desktop/Archive/client/src/utils/relativeTime.js",[],"/Users/hichem/Desktop/Archive/client/src/utils/centToDollars.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":102,"column":6,"nodeType":"76","endLine":102,"endColumn":16,"suggestions":"77"},{"ruleId":"74","severity":1,"message":"78","line":110,"column":6,"nodeType":"76","endLine":110,"endColumn":12,"suggestions":"79"},{"ruleId":"74","severity":1,"message":"80","line":21,"column":6,"nodeType":"76","endLine":21,"endColumn":8,"suggestions":"81"},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'fetchingData'. Either include it or remove the dependency array.","ArrayExpression",["84"],"React Hook React.useEffect has missing dependencies: 'fetchingBatchData' and 'getNewAd'. Either include them or remove the dependency array.",["85"],"React Hook React.useEffect has a missing dependency: 'options'. Either include it or remove the dependency array.",["86"],"no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},"Update the dependencies array to be: [fetchingData, sortType]",{"range":"93","text":"94"},"Update the dependencies array to be: [fetchingBatchData, getNewAd, page]",{"range":"95","text":"96"},"Update the dependencies array to be: [options]",{"range":"97","text":"98"},[3396,3406],"[fetchingData, sortType]",[3640,3646],"[fetchingBatchData, getNewAd, page]",[486,488],"[options]"]